<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="WnckTasklist">
<refmeta>
<refentrytitle role="top_of_page" id="WnckTasklist.top_of_page">WnckTasklist</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBWNCK Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>WnckTasklist</refname>
<refpurpose>a tasklist widget, showing the list of windows as a list
of buttons.</refpurpose>
</refnamediv>
<refsect1 id="WnckTasklist.stability-level">
<title>Stability Level</title>
Unstable, unless otherwise indicated
</refsect1>

<refsynopsisdiv id="WnckTasklist.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;libwnck/libwnck.h&gt;

                    <link linkend="WnckTasklist-struct">WnckTasklist</link>;
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="wnck-tasklist-new">wnck_tasklist_new</link>                   (<link linkend="WnckScreen">WnckScreen</link> *screen);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-screen">wnck_tasklist_set_screen</link>            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckScreen">WnckScreen</link> *screen);
enum                <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link>;
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-grouping">wnck_tasklist_set_grouping</link>          (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link> grouping);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-grouping-limit">wnck_tasklist_set_grouping_limit</link>    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> limit);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-include-all-workspaces">wnck_tasklist_set_include_all_workspaces</link>
                                                        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gboolean">gboolean</link> include_all_workspaces);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-switch-workspace-on-unminimize">wnck_tasklist_set_switch_workspace_on_unminimize</link>
                                                        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gboolean">gboolean</link> switch_workspace_on_unminimize);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-button-relief">wnck_tasklist_set_button_relief</link>     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="GtkReliefStyle">GtkReliefStyle</link> relief);
<link linkend="gint">gint</link>                <link linkend="wnck-tasklist-get-minimum-width">wnck_tasklist_get_minimum_width</link>     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-minimum-width">wnck_tasklist_set_minimum_width</link>     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> size);
<link linkend="gint">gint</link>                <link linkend="wnck-tasklist-get-minimum-height">wnck_tasklist_get_minimum_height</link>    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-minimum-height">wnck_tasklist_set_minimum_height</link>    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> size);
<link linkend="GdkPixbuf">GdkPixbuf</link> *         (<link linkend="WnckLoadIconFunction">*WnckLoadIconFunction</link>)             (const <link linkend="char">char</link> *icon_name,
                                                         <link linkend="int">int</link> size,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *data);
<link linkend="void">void</link>                <link linkend="wnck-tasklist-set-icon-loader">wnck_tasklist_set_icon_loader</link>       (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckLoadIconFunction">WnckLoadIconFunction</link> load_icon_func,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> free_data_func);
const <link linkend="int">int</link> *         <link linkend="wnck-tasklist-get-size-hint-list">wnck_tasklist_get_size_hint_list</link>    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="int">int</link> *n_elements);
</synopsis>
</refsynopsisdiv>
<refsect1 id="WnckTasklist.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GInitiallyUnowned">GInitiallyUnowned</link>
         +----<link linkend="GtkObject">GtkObject</link>
               +----<link linkend="GtkWidget">GtkWidget</link>
                     +----<link linkend="GtkContainer">GtkContainer</link>
                           +----WnckTasklist
</synopsis>
</refsect1>
<refsect1 id="WnckTasklist.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
WnckTasklist implements
 <link linkend="GtkBuildable">GtkBuildable</link> and  <link linkend="AtkImplementorIface">AtkImplementorIface</link>.</para>
</refsect1>
<refsect1 id="WnckTasklist.style-properties" role="style_properties">
<title role="style_properties.title">Style Properties</title>
<synopsis>
  &quot;<link linkend="WnckTasklist--s-fade-loop-time">fade-loop-time</link>&quot;           <link linkend="gfloat">gfloat</link>                : Read
  &quot;<link linkend="WnckTasklist--s-fade-max-loops">fade-max-loops</link>&quot;           <link linkend="gint">gint</link>                  : Read
  &quot;<link linkend="WnckTasklist--s-fade-opacity">fade-opacity</link>&quot;             <link linkend="gfloat">gfloat</link>                : Read
  &quot;<link linkend="WnckTasklist--s-fade-overlay-rect">fade-overlay-rect</link>&quot;        <link linkend="gboolean">gboolean</link>              : Read
</synopsis>
</refsect1>

<refsect1 id="WnckTasklist.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="WnckTasklist"><type>WnckTasklist</type></link> represents client windows on a screen as a list of buttons
labelled with the window titles and icons. Pressing a button can activate or
minimize the represented window, and other typical actions are available
through a popup menu. Windows needing attention can also be distinguished
by a fade effect on the buttons representing them, to help attract the
user's attention.
</para>
<para>
The behavior of the <link linkend="WnckTasklist"><type>WnckTasklist</type></link> can be customized in various ways, like
grouping multiple windows of the same application in one button (see
<link linkend="wnck-tasklist-set-grouping"><function>wnck_tasklist_set_grouping()</function></link> and <link linkend="wnck-tasklist-set-grouping-limit"><function>wnck_tasklist_set_grouping_limit()</function></link>), or
showing windows from all workspaces (see
<link linkend="wnck-tasklist-set-include-all-workspaces"><function>wnck_tasklist_set_include_all_workspaces()</function></link>). The fade effect for windows
needing attention can be controlled by various style properties like
<link linkend="WnckTasklist--fade-max-loops"><type>"fade-max-loops"</type></link> and <link linkend="WnckTasklist--fade-opacity."><type>"fade-opacity."</type></link>
</para>
<para>
The tasklist also acts as iconification destination. If there are multiple
<link linkend="WnckTasklist"><type>WnckTasklist</type></link> or other applications setting the iconification destination
for windows, the iconification destinations might not be consistent among
windows and it is not possible to determine which <link linkend="WnckTasklist"><type>WnckTasklist</type></link> (or which
other application) owns this propriety.</para>
<para>
</para>
</refsect1>
<refsect1 id="WnckTasklist.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="WnckTasklist-struct" role="struct">
<title>WnckTasklist</title>
<indexterm zone="WnckTasklist-struct"><primary>WnckTasklist</primary></indexterm>
<programlisting>typedef struct _WnckTasklist WnckTasklist;</programlisting>
<para>
The <link linkend="WnckTasklist"><type>WnckTasklist</type></link> struct contains only private fields and should not be
directly accessed.</para>
<para>
</para></refsect2>
<refsect2 id="wnck-tasklist-new" role="function">
<title>wnck_tasklist_new ()</title>
<indexterm zone="wnck-tasklist-new"><primary>wnck_tasklist_new</primary></indexterm>
<programlisting><link linkend="GtkWidget">GtkWidget</link> *         wnck_tasklist_new                   (<link linkend="WnckScreen">WnckScreen</link> *screen);</programlisting>
<para>
Creates a new <link linkend="WnckTasklist."><type>WnckTasklist.</type></link> The <link linkend="WnckTasklist"><type>WnckTasklist</type></link> will list <link linkend="WnckWindow"><type>WnckWindow</type></link> of the
<link linkend="WnckScreen"><type>WnckScreen</type></link> it is on.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>screen</parameter>&#160;:</term>
<listitem><simpara> deprecated argument, can be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly created <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-screen" role="function" condition="deprecated:2.20:|since:2.2">
<title>wnck_tasklist_set_screen ()</title>
<indexterm zone="wnck-tasklist-set-screen" role="deprecated"><primary>wnck_tasklist_set_screen</primary></indexterm><indexterm zone="wnck-tasklist-set-screen" role="2.2"><primary>wnck_tasklist_set_screen</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_screen            (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckScreen">WnckScreen</link> *screen);</programlisting>
<warning><para><literal>wnck_tasklist_set_screen</literal> has been deprecated since version 2.20 and should not be used in newly-written code. </para></warning>
<para>
Does nothing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>screen</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckScreen."><type>WnckScreen.</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="WnckTasklistGroupingType" role="enum">
<title>enum WnckTasklistGroupingType</title>
<indexterm zone="WnckTasklistGroupingType"><primary>WnckTasklistGroupingType</primary></indexterm>
<programlisting>typedef enum {
  WNCK_TASKLIST_NEVER_GROUP,
  WNCK_TASKLIST_AUTO_GROUP,
  WNCK_TASKLIST_ALWAYS_GROUP
} WnckTasklistGroupingType;
</programlisting>
<para>
Type defining the policy of the <link linkend="WnckTasklist"><type>WnckTasklist</type></link> for grouping multiple
<link linkend="WnckWindow"><type>WnckWindow</type></link> of the same <link linkend="WnckApplication."><type>WnckApplication.</type></link></para>
<para>
</para><variablelist role="enum">
<varlistentry id="WNCK-TASKLIST-NEVER-GROUP:CAPS" role="constant">
<term><literal>WNCK_TASKLIST_NEVER_GROUP</literal></term>
<listitem><simpara> never group multiple <link linkend="WnckWindow"><type>WnckWindow</type></link> of the same
<link linkend="WnckApplication."><type>WnckApplication.</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry id="WNCK-TASKLIST-AUTO-GROUP:CAPS" role="constant">
<term><literal>WNCK_TASKLIST_AUTO_GROUP</literal></term>
<listitem><simpara> group multiple <link linkend="WnckWindow"><type>WnckWindow</type></link> of the same
<link linkend="WnckApplication"><type>WnckApplication</type></link> for some <link linkend="WnckApplication"><type>WnckApplication</type></link>, when there is not enough place
to have a good-looking list of all <link linkend="WnckWindow."><type>WnckWindow.</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry id="WNCK-TASKLIST-ALWAYS-GROUP:CAPS" role="constant">
<term><literal>WNCK_TASKLIST_ALWAYS_GROUP</literal></term>
<listitem><simpara> always group multiple <link linkend="WnckWindow"><type>WnckWindow</type></link> of the same
<link linkend="WnckApplication"><type>WnckApplication</type></link>, for all <link linkend="WnckApplication."><type>WnckApplication.</type></link>
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-grouping" role="function">
<title>wnck_tasklist_set_grouping ()</title>
<indexterm zone="wnck-tasklist-set-grouping"><primary>wnck_tasklist_set_grouping</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_grouping          (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckTasklistGroupingType">WnckTasklistGroupingType</link> grouping);</programlisting>
<para>
Sets the grouping policy for <parameter>tasklist</parameter> to <parameter>grouping</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>grouping</parameter>&#160;:</term>
<listitem><simpara> a grouping policy.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-grouping-limit" role="function">
<title>wnck_tasklist_set_grouping_limit ()</title>
<indexterm zone="wnck-tasklist-set-grouping-limit"><primary>wnck_tasklist_set_grouping_limit</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_grouping_limit    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> limit);</programlisting>
<para>
Sets the maximum size of buttons in <parameter>tasklist</parameter> before <parameter>tasklist</parameter> tries to
group <link linkend="WnckWindow"><type>WnckWindow</type></link> in the same <link linkend="WnckApplication"><type>WnckApplication</type></link> in only one button. This
limit is valid only when the grouping policy of <parameter>tasklist</parameter> is
<link linkend="WNCK-TASKLIST-AUTO-GROUP:CAPS"><literal>WNCK_TASKLIST_AUTO_GROUP</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>limit</parameter>&#160;:</term>
<listitem><simpara> a size in pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-include-all-workspaces" role="function">
<title>wnck_tasklist_set_include_all_workspaces ()</title>
<indexterm zone="wnck-tasklist-set-include-all-workspaces"><primary>wnck_tasklist_set_include_all_workspaces</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_include_all_workspaces
                                                        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gboolean">gboolean</link> include_all_workspaces);</programlisting>
<para>
Sets <parameter>tasklist</parameter> to display <link linkend="WnckWindow"><type>WnckWindow</type></link> from all <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> or not,
according to <parameter>include_all_workspaces</parameter>.
</para>
<para>
Note that if the active <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> has a viewport and if
<parameter>include_all_workspaces</parameter> is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link>, then only the <link linkend="WnckWindow"><type>WnckWindow</type></link> visible in the
viewport are displayed in <parameter>tasklist</parameter>. The rationale for this is that the
viewport is generally used to implement workspace-like behavior. A
side-effect of this is that, when using multiple <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> with
viewport, it is not possible to show all <link linkend="WnckWindow"><type>WnckWindow</type></link> from a <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link>
(even those that are not visible in the viewport) in <parameter>tasklist</parameter> without
showing all <link linkend="WnckWindow"><type>WnckWindow</type></link> from all <link linkend="WnckWorkspace."><type>WnckWorkspace.</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>include_all_workspaces</parameter>&#160;:</term>
<listitem><simpara> whether to display <link linkend="WnckWindow"><type>WnckWindow</type></link> from all
<link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> in <parameter>tasklist</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-switch-workspace-on-unminimize" role="function">
<title>wnck_tasklist_set_switch_workspace_on_unminimize ()</title>
<indexterm zone="wnck-tasklist-set-switch-workspace-on-unminimize"><primary>wnck_tasklist_set_switch_workspace_on_unminimize</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_switch_workspace_on_unminimize
                                                        (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gboolean">gboolean</link> switch_workspace_on_unminimize);</programlisting>
<para>
Sets <parameter>tasklist</parameter> to activate or not the <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> a <link linkend="WnckWindow"><type>WnckWindow</type></link> is on
when unminimizing it, according to <parameter>switch_workspace_on_unminimize</parameter>.
</para>
<para>
FIXME: does it still work?</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>switch_workspace_on_unminimize</parameter>&#160;:</term>
<listitem><simpara> whether to activate the <link linkend="WnckWorkspace"><type>WnckWorkspace</type></link> a
<link linkend="WnckWindow"><type>WnckWindow</type></link> is on when unminimizing it.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-button-relief" role="function" condition="since:2.12">
<title>wnck_tasklist_set_button_relief ()</title>
<indexterm zone="wnck-tasklist-set-button-relief" role="2.12"><primary>wnck_tasklist_set_button_relief</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_button_relief     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="GtkReliefStyle">GtkReliefStyle</link> relief);</programlisting>
<para>
Sets the relief type of the buttons in <parameter>tasklist</parameter> to <parameter>relief</parameter>. The main use of
this function is proper integration of <link linkend="WnckTasklist"><type>WnckTasklist</type></link> in panels with
non-system backgrounds.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>relief</parameter>&#160;:</term>
<listitem><simpara> a relief type.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12</para></refsect2>
<refsect2 id="wnck-tasklist-get-minimum-width" role="function" condition="deprecated:2.20:">
<title>wnck_tasklist_get_minimum_width ()</title>
<indexterm zone="wnck-tasklist-get-minimum-width" role="deprecated"><primary>wnck_tasklist_get_minimum_width</primary></indexterm>
<programlisting><link linkend="gint">gint</link>                wnck_tasklist_get_minimum_width     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);</programlisting>
<warning><para><literal>wnck_tasklist_get_minimum_width</literal> has been deprecated since version 2.20 and should not be used in newly-written code. </para></warning>
<para>
Returns -1.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> -1.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-minimum-width" role="function" condition="deprecated:2.20:">
<title>wnck_tasklist_set_minimum_width ()</title>
<indexterm zone="wnck-tasklist-set-minimum-width" role="deprecated"><primary>wnck_tasklist_set_minimum_width</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_minimum_width     (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> size);</programlisting>
<warning><para><literal>wnck_tasklist_set_minimum_width</literal> has been deprecated since version 2.20 and should not be used in newly-written code. </para></warning>
<para>
Does nothing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> a minimum width in pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-get-minimum-height" role="function" condition="deprecated:2.20:">
<title>wnck_tasklist_get_minimum_height ()</title>
<indexterm zone="wnck-tasklist-get-minimum-height" role="deprecated"><primary>wnck_tasklist_get_minimum_height</primary></indexterm>
<programlisting><link linkend="gint">gint</link>                wnck_tasklist_get_minimum_height    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist);</programlisting>
<warning><para><literal>wnck_tasklist_get_minimum_height</literal> has been deprecated since version 2.20 and should not be used in newly-written code. </para></warning>
<para>
Returns -1.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> -1.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wnck-tasklist-set-minimum-height" role="function" condition="deprecated:2.20:">
<title>wnck_tasklist_set_minimum_height ()</title>
<indexterm zone="wnck-tasklist-set-minimum-height" role="deprecated"><primary>wnck_tasklist_set_minimum_height</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_minimum_height    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="gint">gint</link> size);</programlisting>
<warning><para><literal>wnck_tasklist_set_minimum_height</literal> has been deprecated since version 2.20 and should not be used in newly-written code. </para></warning>
<para>
Does nothing.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> a minimum height in pixels.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="WnckLoadIconFunction" role="function" condition="since:2.2">
<title>WnckLoadIconFunction ()</title>
<indexterm zone="WnckLoadIconFunction" role="2.2"><primary>WnckLoadIconFunction</primary></indexterm>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link> *         (*WnckLoadIconFunction)             (const <link linkend="char">char</link> *icon_name,
                                                         <link linkend="int">int</link> size,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *data);</programlisting>
<para>
Specifies the type of function passed to <link linkend="wnck-tasklist-set-icon-loader"><function>wnck_tasklist_set_icon_loader()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>icon_name</parameter>&#160;:</term>
<listitem><simpara> an icon name as in the Icon field in a .desktop file for the
icon to load.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> the desired icon size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> not defined to do anything yet.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data passed to the function, set when the <link linkend="WnckLoadIconFunction"><type>WnckLoadIconFunction</type></link> has
been set for the <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> it should return a <classname>GdkPixbuf</classname> of <parameter>icon_name</parameter>
at size <parameter>size</parameter>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no icon for <parameter>icon_name</parameter> at size <parameter>size</parameter> could be
loaded.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="wnck-tasklist-set-icon-loader" role="function" condition="since:2.2">
<title>wnck_tasklist_set_icon_loader ()</title>
<indexterm zone="wnck-tasklist-set-icon-loader" role="2.2"><primary>wnck_tasklist_set_icon_loader</primary></indexterm>
<programlisting><link linkend="void">void</link>                wnck_tasklist_set_icon_loader       (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="WnckLoadIconFunction">WnckLoadIconFunction</link> load_icon_func,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> free_data_func);</programlisting>
<para>
Sets a function to be used for loading icons.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist"><type>WnckTasklist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>load_icon_func</parameter>&#160;:</term>
<listitem><simpara> icon loader function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> data for icon loader function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_data_func</parameter>&#160;:</term>
<listitem><simpara> function to free the data
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.2</para></refsect2>
<refsect2 id="wnck-tasklist-get-size-hint-list" role="function">
<title>wnck_tasklist_get_size_hint_list ()</title>
<indexterm zone="wnck-tasklist-get-size-hint-list"><primary>wnck_tasklist_get_size_hint_list</primary></indexterm>
<programlisting>const <link linkend="int">int</link> *         wnck_tasklist_get_size_hint_list    (<link linkend="WnckTasklist">WnckTasklist</link> *tasklist,
                                                         <link linkend="int">int</link> *n_elements);</programlisting>
<para>
Since a <link linkend="WnckTasklist"><type>WnckTasklist</type></link> does not have a fixed size (<link linkend="WnckWindow"><type>WnckWindow</type></link> can be grouped
when needed, for example), the standard size request mechanism in GTK+ is
not enough to announce what sizes can be used by <parameter>tasklist</parameter>. The size hints
mechanism is a solution for this. See <link linkend="panel-applet-set-size-hints"><function>panel_applet_set_size_hints()</function></link> for more
information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>tasklist</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WnckTasklist."><type>WnckTasklist.</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>n_elements</parameter>&#160;:</term>
<listitem><simpara> return location for the number of elements in the array
returned by this function. This number should always be pair.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of size hints that can be used to allocate an
appropriate size for <parameter>tasklist</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="WnckTasklist.style-property-details" role="style_properties_details">
<title role="style_properties_details.title">Style Property Details</title>
<refsect2 id="WnckTasklist--s-fade-loop-time" role="property"><title>The <literal>&quot;fade-loop-time&quot;</literal> style property</title>
<indexterm zone="WnckTasklist--s-fade-loop-time" role="2.16"><primary>WnckTasklist:fade-loop-time</primary></indexterm>
<programlisting>  &quot;fade-loop-time&quot;           <link linkend="gfloat">gfloat</link>                : Read</programlisting>
<para>
When a window needs attention, a fade effect is drawn on the button
representing the window. This property controls the time one loop of this
fade effect takes, in seconds.</para>
<para>
</para><para>Allowed values: [0.2,10]</para>
<para>Default value: 3</para>
<para role="since">Since 2.16</para></refsect2>
<refsect2 id="WnckTasklist--s-fade-max-loops" role="property"><title>The <literal>&quot;fade-max-loops&quot;</literal> style property</title>
<indexterm zone="WnckTasklist--s-fade-max-loops" role="2.20"><primary>WnckTasklist:fade-max-loops</primary></indexterm>
<programlisting>  &quot;fade-max-loops&quot;           <link linkend="gint">gint</link>                  : Read</programlisting>
<para>
When a window needs attention, a fade effect is drawn on the button
representing the window. This property controls the number of loops for
this fade effect. 0 means the button will only fade to the final color.</para>
<para>
</para><para>Allowed values: [0,50]</para>
<para>Default value: 5</para>
<para role="since">Since 2.20</para></refsect2>
<refsect2 id="WnckTasklist--s-fade-opacity" role="property"><title>The <literal>&quot;fade-opacity&quot;</literal> style property</title>
<indexterm zone="WnckTasklist--s-fade-opacity" role="2.16"><primary>WnckTasklist:fade-opacity</primary></indexterm>
<programlisting>  &quot;fade-opacity&quot;             <link linkend="gfloat">gfloat</link>                : Read</programlisting>
<para>
When a window needs attention, a fade effect is drawn on the button
representing the window. This property controls the final opacity that
will be reached by the fade effect.</para>
<para>
</para><para>Allowed values: [0,1]</para>
<para>Default value: 0.8</para>
<para role="since">Since 2.16</para></refsect2>
<refsect2 id="WnckTasklist--s-fade-overlay-rect" role="property"><title>The <literal>&quot;fade-overlay-rect&quot;</literal> style property</title>
<indexterm zone="WnckTasklist--s-fade-overlay-rect" role="2.16"><primary>WnckTasklist:fade-overlay-rect</primary></indexterm>
<programlisting>  &quot;fade-overlay-rect&quot;        <link linkend="gboolean">gboolean</link>              : Read</programlisting>
<para>
When a window needs attention, a fade effect is drawn on the button
representing the window. Set this property to <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> to enable a
compatibility mode for pixbuf engine themes that cannot react to color
changes. If enabled, a rectangle with the correct color will be drawn on
top of the button.</para>
<para>
</para><para>Default value: TRUE</para>
<para role="since">Since 2.16</para></refsect2>
</refsect1>
<refsect1 id="WnckTasklist.see-also">
<title>See Also</title>
<link linkend="WnckScreen"><type>WnckScreen</type></link>, <link linkend="WnckSelector"><type>WnckSelector</type></link>
</refsect1>

</refentry>
